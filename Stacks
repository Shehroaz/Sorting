import java.util.Arrays;

public class StackProblem {
    private int[] items = new int[5];
    private int top1 = 0;
    private int top2 = items.length/2 + 1;

    public void push1(int item){
     if(!isFull1()){
         items[top1++] = item;
     }else{
         throw new StackOverflowError("Stack1 is full");
     }
    }

    public void push2(int item){
        if (!isFull2()){
            items[top2++] = item;
        }else{
            throw new StackOverflowError("Stack2 is full");
        }
    }

    public boolean isEmpty1(){
        return top1 == 0;
    }

    public boolean isEmpty2(){
        return top2 == items.length/2 + 1;
    }

    public int pop1(){
        if (!isEmpty1()){
            return items[--top1];
        }
        else
            throw new IllegalArgumentException();
    }

    public int pop2(){
        if (!isEmpty2()){
            return items[--top2];
        }
        else
            throw new IllegalArgumentException();
    }

    public boolean isFull1(){
        return top1 == items.length/2 + 1;
    }
    public boolean isFull2(){
        return top2 == items.length;
    }

    public String toStringStack1() {
        int [] content = Arrays.copyOfRange(items,0,top1);
        return Arrays.toString(content);
    }

    public String toStringStack2() {
        int [] content = Arrays.copyOfRange(items,top1,top2);
        return Arrays.toString(content);
    }

}
